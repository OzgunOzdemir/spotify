{"ast":null,"code":"var _jsxFileName = \"/Users/ozgunozdemir/Desktop/gitlab/spotify/src/containers/Home/Home.js\";\nimport React, { Component, Fragment } from 'react';\nimport './Home.css';\nimport { connect } from 'react-redux';\nimport { updateUser } from '../../redux/actions/index';\nimport queryString from 'query-string';\nimport { getMe, getListCategories, getNewReleases } from '../../services/index';\nimport Category from '../../components/Ui/Category/Category';\nimport Playlist from '../../components/Ui/Playlist/Playlist';\nimport Loading from '../../components/Ui/Loading/Loading';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const sesiontoken = sessionStorage.getItem(\"access_token\"); // for refresh page\n\n      if (!sesiontoken) {\n        const values = queryString.parse(this.props.location.search);\n        sessionStorage.setItem(\"access_token\", values.access_token);\n        this.setState({\n          access_token: values.access_token\n        });\n      }\n\n      const token = sessionStorage.getItem(\"access_token\"); // get profile\n\n      const me = await getMe(token);\n      this.props.onUpdateUser(me.data); //  get categories and get New releases albums\n\n      const getCategories = await getListCategories(token);\n      const getNewReleasesAlbums = await getNewReleases(token);\n      this.setState({\n        categories: getCategories.data,\n        getNewReleasesAlbums: getNewReleasesAlbums.data.albums,\n        loadingShow: false\n      });\n    };\n\n    this.handlerPlaylistspage = item => {\n      let queryString = \"category_id=\" + item.id;\n      this.props.history.push(\"/playlists?\".concat(queryString));\n    };\n\n    this.handlerTrackspage = item => {\n      let queryString = \"id=\" + item.id;\n      this.props.history.push(\"/albums?\".concat(queryString));\n    };\n\n    this.handlerPlaylistsFromSearch = item => {\n      let queryString = \"id=\" + item.id;\n      this.props.history.push(\"/tracks?\".concat(queryString));\n    };\n\n    this.state = {\n      categories: {},\n      getNewReleasesAlbums: {},\n      access_token: null,\n      loadingShow: true\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.loadingShow === false ? this.props.search.show === false ? React.createElement(\"div\", {\n      className: \"PageContainer container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PageContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PageTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"PageTitleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Categories\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.categories.items ? this.state.categories.items.map((item, i) => React.createElement(Category, {\n      item: item,\n      key: i,\n      onClick: () => this.handlerPlaylistspage(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })) : ''), React.createElement(\"div\", {\n      className: \"PageTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"PageTitleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"New Releases albums\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.getNewReleasesAlbums.items ? this.state.getNewReleasesAlbums.items.map((item, i) => React.createElement(Playlist, {\n      item: item,\n      key: i,\n      onClick: () => this.handlerTrackspage(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })) : ''))) : React.createElement(\"div\", {\n      className: \"PageContainer container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PageContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"PageTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"PageTitleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Search for Playlists\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.props.search.playList.items.length > 0 ? this.props.search.playList.items.map((item, i) => React.createElement(Playlist, {\n      item: item,\n      key: i,\n      onClick: () => this.handlerPlaylistsFromSearch(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"SearchNotFound\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Search result not found...\")), React.createElement(\"div\", {\n      className: \"PageTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"PageTitleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Search for Albums\")), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.props.search.albums.items.length > 0 ? this.props.search.albums.items.map((item, i) => React.createElement(Playlist, {\n      item: item,\n      key: i,\n      onClick: () => this.handlerTrackspage(item),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"SearchNotFound\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Search result not found...\")))) : React.createElement(Loading, {\n      show: this.state.loadingShow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    search: state.search\n  };\n};\n\nconst mapDispatchToProps = {\n  onUpdateUser: updateUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["/Users/ozgunozdemir/Desktop/gitlab/spotify/src/containers/Home/Home.js"],"names":["React","Component","Fragment","connect","updateUser","queryString","getMe","getListCategories","getNewReleases","Category","Playlist","Loading","Dashboard","constructor","props","componentDidMount","sesiontoken","sessionStorage","getItem","values","parse","location","search","setItem","access_token","setState","token","me","onUpdateUser","data","getCategories","getNewReleasesAlbums","categories","albums","loadingShow","handlerPlaylistspage","item","id","history","push","handlerTrackspage","handlerPlaylistsFromSearch","state","render","show","items","map","i","playList","length","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport './Home.css';\nimport { connect } from 'react-redux';\nimport { updateUser } from '../../redux/actions/index';\nimport queryString from 'query-string';\nimport { getMe, getListCategories, getNewReleases } from '../../services/index';\nimport Category from '../../components/Ui/Category/Category';\nimport Playlist from '../../components/Ui/Playlist/Playlist';\nimport Loading from '../../components/Ui/Loading/Loading';\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            categories: {},\n            getNewReleasesAlbums: {},\n            access_token: null,\n            loadingShow: true\n        }\n    }\n\n    componentDidMount = async () => {\n        const sesiontoken = sessionStorage.getItem(\"access_token\");\n        // for refresh page\n        if (!sesiontoken) {\n            const values = queryString.parse(this.props.location.search);\n            sessionStorage.setItem(\"access_token\", values.access_token);\n            this.setState({\n                access_token: values.access_token\n            })\n        }\n        const token = sessionStorage.getItem(\"access_token\");\n        // get profile\n        const me = await getMe(token);\n        this.props.onUpdateUser(me.data);\n        //  get categories and get New releases albums\n        const getCategories = await getListCategories(token);\n        const getNewReleasesAlbums = await getNewReleases(token);\n        this.setState({\n            categories: getCategories.data,\n            getNewReleasesAlbums: getNewReleasesAlbums.data.albums,\n            loadingShow: false\n        })\n    }\n\n    handlerPlaylistspage = (item) => {\n        let queryString = \"category_id=\" + item.id;\n        this.props.history.push(`/playlists?${queryString}`);\n    }\n\n    handlerTrackspage = (item) => {\n        let queryString = \"id=\" + item.id;\n        this.props.history.push(`/albums?${queryString}`);\n    }\n\n    handlerPlaylistsFromSearch = (item) => {\n        let queryString = \"id=\" + item.id;\n        this.props.history.push(`/tracks?${queryString}`);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {\n                    this.state.loadingShow === false ?\n                        this.props.search.show === false ?\n                            <div className=\"PageContainer container\">\n                                <div className=\"PageContent\">\n                                    <div className=\"PageTitle\">\n                                        <span className=\"PageTitleText\">Categories</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        {\n                                            this.state.categories.items ?\n                                                this.state.categories.items.map((item, i) =>\n                                                    <Category item={item} key={i} onClick={() => this.handlerPlaylistspage(item)} />\n                                                ) : ''\n                                        }\n                                    </div>\n                                    <div className=\"PageTitle\">\n                                        <span className=\"PageTitleText\">New Releases albums</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        {\n                                            this.state.getNewReleasesAlbums.items ?\n                                                this.state.getNewReleasesAlbums.items.map((item, i) =>\n                                                    <Playlist item={item} key={i} onClick={() => this.handlerTrackspage(item)} />\n                                                ) : ''\n                                        }\n                                    </div>\n                                </div>\n                            </div> :\n                            <div className=\"PageContainer container\">\n                                <div className=\"PageContent\">\n                                    <div className=\"PageTitle\">\n                                        <span className=\"PageTitleText\">Search for Playlists</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        {\n                                            this.props.search.playList.items.length > 0 ?\n                                                this.props.search.playList.items.map((item, i) =>\n                                                    <Playlist item={item} key={i} onClick={() => this.handlerPlaylistsFromSearch(item)}/>\n                                                ) : <div className=\"SearchNotFound\">Search result not found...</div>\n                                        }\n                                    </div>\n                                    <div className=\"PageTitle\">\n                                        <span className=\"PageTitleText\">Search for Albums</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        {\n                                            this.props.search.albums.items.length > 0 ?\n                                                this.props.search.albums.items.map((item, i) =>\n                                                    <Playlist item={item} key={i} onClick={() => this.handlerTrackspage(item)}/>\n                                                ) : <div className=\"SearchNotFound\">Search result not found...</div>\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        : <Loading show={this.state.loadingShow} />\n                }\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return ({\n        search: state.search\n    });\n}\n\nconst mapDispatchToProps = {\n    onUpdateUser: updateUser\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}
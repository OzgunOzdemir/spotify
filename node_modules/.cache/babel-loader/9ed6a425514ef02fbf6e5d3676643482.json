{"ast":null,"code":"import axios from 'axios/index';\nconst url = \"https://api.spotify.com/v1\";\n\nconst getHeaders = token => {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer ' + token,\n    'Accept': 'application/json'\n  };\n  return headers;\n};\n\nconst getMe = async token => {\n  const headers = await getHeaders(token);\n  const data = [];\n  await axios.get(url + '/me', {\n    headers: headers\n  }).then(response => {\n    data.push(response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getListCategories = async token => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/browse/categories', {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data.categories);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getPlaylistByCategory = async (token, category_id) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/browse/categories/' + category_id + '/playlists', {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data.playlists);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getPlayList = async (token, id) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/playlists/' + id, {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getTracksByPlayList = async (token, id) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/playlists/' + id + '/tracks', {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getNewReleases = async token => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/browse/new-releases', {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getAlbumsById = async (token, id) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/albums/' + id, {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getTracksByAlbums = async (token, id) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/albums/' + id + '/tracks', {\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getSearchByAlbums = async (token, value) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/search', {\n    params: {\n      'q': value,\n      'type': 'album'\n    },\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nconst getSearchByPlaylist = async (token, value) => {\n  const headers = await getHeaders(token);\n  let data = {};\n  await axios.get(url + '/search', {\n    params: {\n      'q': value,\n      'type': 'playlist'\n    },\n    headers: headers\n  }).then(response => {\n    data = Object.assign({}, response.data);\n  }).catch(error => {\n    return {\n      status: 'error',\n      message: error.response.data.error.message\n    };\n  });\n  return {\n    status: 'success',\n    data: data\n  };\n};\n\nexport { getHeaders, getMe, getListCategories, getPlaylistByCategory, getPlayList, getTracksByPlayList, getNewReleases, getAlbumsById, getTracksByAlbums, getSearchByAlbums, getSearchByPlaylist };","map":{"version":3,"sources":["/Users/ozgunozdemir/Desktop/gitlab/spotify/src/services/index.js"],"names":["axios","url","getHeaders","token","headers","getMe","data","get","then","response","push","catch","error","status","message","getListCategories","Object","assign","categories","getPlaylistByCategory","category_id","playlists","getPlayList","id","getTracksByPlayList","getNewReleases","getAlbumsById","getTracksByAlbums","getSearchByAlbums","value","params","getSearchByPlaylist"],"mappings":"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","sourcesContent":["import axios from 'axios/index';\n\nconst url =\"https://api.spotify.com/v1\";\n\nconst getHeaders = (token) => {\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token,\n        'Accept': 'application/json'\n    }\n\n    return headers;\n}\n\nconst getMe = async (token) => {\n    const headers = await getHeaders(token);\n    const data = [];\n    await axios.get(url + '/me', { headers: headers })\n        .then((response) => {\n            data.push(response.data);\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getListCategories = async (token) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/browse/categories', { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data.categories)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getPlaylistByCategory = async (token, category_id) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/browse/categories/' + category_id + '/playlists', { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data.playlists)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getPlayList = async (token, id) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/playlists/' + id , { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getTracksByPlayList = async (token, id) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/playlists/' + id + '/tracks', { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getNewReleases = async (token) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/browse/new-releases', { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getAlbumsById = async (token, id) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/albums/' + id , { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getTracksByAlbums = async (token, id) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/albums/' + id + '/tracks', { headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getSearchByAlbums = async (token, value) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/search',{ \n        params: {\n        'q': value,\n        'type': 'album'\n      }, headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nconst getSearchByPlaylist = async (token, value) => {\n    const headers = await getHeaders(token);\n    let data = {};\n    await axios.get(url + '/search',{ \n        params: {\n        'q': value,\n        'type': 'playlist'\n      }, headers: headers })\n        .then((response) => {\n            data = Object.assign({},response.data)\n        })\n        .catch((error) => {\n            return {\n                status: 'error',\n                message: error.response.data.error.message\n            }\n        })\n    return {\n        status: 'success',\n        data: data\n    }\n}\n\nexport { getHeaders, getMe, getListCategories, getPlaylistByCategory, getPlayList, getTracksByPlayList, getNewReleases, getAlbumsById, getTracksByAlbums, getSearchByAlbums, getSearchByPlaylist };"]},"metadata":{},"sourceType":"module"}